workflow:
  rules:
    # For merge requests, create a pipeline.
    - if: '$CI_MERGE_REQUEST_IID'
    # For default branch, create a pipeline (this includes on schedules, pushes, merges, etc.).
    # - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    # Temporarly create Ci for every branch:
    - if: '$CI_COMMIT_BRANCH'
    # For tags, create a pipeline.
    - if: '$CI_COMMIT_TAG'
    # For stable branches, create a pipeline.
    - if: '$CI_COMMIT_BRANCH =~ /^[\d-]+-stable$/'

stages:
  - lint
  - build
  - test

default:
  image: golang:1.15

lint:
  stage: lint
  before_script:
    - go mod verify
    - go mod download
  script:
    - make lint

build-minimum:
  stage: build
  image: golang:1.13
  script:
    - make build

build-maximum:
  stage: build
  script:
    - make build

run-tests:
  stage: test
  variables:
    GOPATH: "/builds/go"
    GIT_CLONE_PATH: $GOPATH/src/github.com/profclems/glab
    GITLAB_TOKEN: $GITLAB_TOKEN
    CODECOV_TOKEN: $CODECOV_TOKEN
  before_script:
    - mkdir ~/.ssh && chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - echo -e $SSH_PUBLIC_KEY > ~/.ssh/id_rsa.pub
    - echo -e $SSH_PRIVATE_KEY > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa*
    - eval `ssh-agent -s`
    - ssh-add ~/.ssh/id_rsa
  script:
    - go version
    - export PATH=$GOPATH/bin:$PATH
    - go get -t -v ./...
    - make test
    - bash <(curl -s https://codecov.io/bash)
